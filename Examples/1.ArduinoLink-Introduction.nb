(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     16258,        478]
NotebookOptionsPosition[     13203,        378]
NotebookOutlinePosition[     13560,        394]
CellTagsIndexPosition[     13517,        391]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ArduinoLink", "Section",
 CellChangeTimes->{{3.5287287122492437`*^9, 3.5287287144726343`*^9}}],

Cell[CellGroupData[{

Cell["Introduction", "Subsection",
 CellChangeTimes->{{3.528728873860797*^9, 3.528728884112987*^9}, {
  3.528743522859845*^9, 3.528743524139987*^9}}],

Cell[TextData[{
 "ArduinoLink is a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package that allows for an Arduino device to be symbolically programmed \
and interacted with through the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook interface. It inputs SymbolicC and package-specific functions for \
programming the device, and uses other package-specific functions to interact \
with the device over the serial port.\n\nArduinoLink uses code generation to \
minimize the amount of code that is needed, which makes it slightly different \
from the Arduino IDE that ships with Arduino microcontrollers. In the IDE, \
users must program the Arduino in a C-esque language. With this ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " package, much of the code that would normally be written by the programmer \
is automatically generated by the package, which examines other code in the \
package to generate the correct headers, includes, pin modes, and other \
programming chores that the programmer would otherwise have to explicitly \
declare.\n\nThe package\[CloseCurlyQuote]s current limitations are that it \
can only be used with the Arduino Uno, as it has not been tested with any \
other boards, and that it has only been tested on computers running Mac OSX \
(although cross-platform support is not a difficult goal to achieve, since \
most of the heavy lifting uses platform-independent tools). "
}], "Text",
 CellChangeTimes->{{3.528728760765353*^9, 3.5287288642921133`*^9}, {
  3.5287289103272953`*^9, 3.528729144528221*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dependencies", "Subsection",
 CellChangeTimes->{{3.5287292400863047`*^9, 3.5287292448768883`*^9}}],

Cell[TextData[{
 StyleBox["Arduino IDE version 0022 ", "Text",
  FontWeight->"Bold"],
 StyleBox["- must be installed and present in your Applications folder. This \
can be found at ", "Text"],
 "http://arduino.cc/en/Main/Software",
 StyleBox["\n", "Text"],
 StyleBox["FTDI USB Serial Driver ", "Text",
  FontWeight->"Bold"],
 StyleBox["- this driver comes with the Arduino IDE.\n\nAfter downloading the \
IDE from the website, open the disk image. In the disk image, there will be \
an application called Arduino that you drag to your Applications folder. \
There will also be a package called FTDI USB Serial Driver - double click to \
install.", "Text"]
}], "Text",
 CellChangeTimes->{{3.5287292461842957`*^9, 3.528729553284096*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Report bugs", "Subsection",
 CellChangeTimes->{{3.5287295622142067`*^9, 3.528729569868044*^9}}],

Cell["\<\
ArduinoLink is still a very young and undeveloped initiative, which has quite \
a ways to go before it can come close to encompassing all the functionality \
and libraries of the Arduino microcontroller. To report bugs or odd behavior, \
send me an email:

Keshav Saharia
keshavs@wolfram.com\
\>", "Text",
 CellChangeTimes->{{3.528729574668095*^9, 3.528729643870216*^9}, {
  3.5287297504531317`*^9, 3.5287297851144123`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The basics", "Section",
 CellChangeTimes->{{3.528729152082725*^9, 3.528729157106884*^9}}],

Cell["Load the package.", "Text",
 CellChangeTimes->{{3.52872916155492*^9, 3.528729168563129*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<ArduinoLink`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.5287287047931643`*^9, 3.5287287082023487`*^9}}],

Cell["\<\
Get a list of all connected Arduino microcontrollers.\
\>", "Text",
 CellChangeTimes->{{3.528729171899198*^9, 3.5287291827554007`*^9}}],

Cell[BoxData[
 RowBox[{"LinkArduino", "[", "]"}]], "Input",
 CellChangeTimes->{{3.528729184088772*^9, 3.528729185660874*^9}}],

Cell["\<\
Create a symbol to store the first microcontroller connected.\
\>", "Text",
 CellChangeTimes->{{3.5287291971201477`*^9, 3.5287292221963778`*^9}}],

Cell[BoxData[
 RowBox[{"uno", "=", 
  RowBox[{"First", "[", 
   RowBox[{"LinkArduino", "[", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5287292229152803`*^9, 3.528729227547593*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Uploading to the Arduino", "Section",
 CellChangeTimes->{{3.528729970488269*^9, 3.5287299935420322`*^9}}],

Cell[TextData[{
 "Because I figured you probably have your Arduino wired up differently than \
mine, I\[CloseCurlyQuote]m just going to take some examples off the Arduino \
website and convert them to the ",
 StyleBox["Mathematica ",
  FontSlant->"Italic"],
 "implementation."
}], "Text",
 CellChangeTimes->{{3.528729979773964*^9, 3.5287300255270576`*^9}, {
  3.528730131529471*^9, 3.528730153762206*^9}}],

Cell[CellGroupData[{

Cell["Bare minimum", "Subsection",
 CellChangeTimes->{{3.528730070210256*^9, 3.5287300752239933`*^9}}],

Cell["\<\
The Arduino tutorial: http://arduino.cc/en/Tutorial/BareMinimum\
\>", "Text",
 CellChangeTimes->{{3.528730076351101*^9, 3.5287301068370667`*^9}, {
  3.528730156874485*^9, 3.528730160170259*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArduinoUpload", "[", 
  RowBox[{"uno", ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"(*", " ", 
     RowBox[{"setup", " ", "instructions"}], " ", "*)"}], " ", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"loop", " ", "instructions"}], " ", "*)"}], " ", "}"}]}], 
  "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.52873011206514*^9, 3.528730135972611*^9}, 
   3.528730561423585*^9}],

Cell["\<\
When you run the cell above, it should show itself as evaluating for a few \
seconds, then it will stop. You should see some LEDs blink on your Arduino as \
this is happening - if not, check out the Troubleshooting notebook elsewhere \
in the Examples folder.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.5287302210995703`*^9, 3.5287302516684*^9}, {
   3.5287302973018827`*^9, 3.528730360071074*^9}, 3.528730561423781*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArduinoUpload", "[", 
  RowBox[{"uno", ",", "\[IndentingNewLine]", 
   RowBox[{"{", " ", 
    RowBox[{"(*", " ", 
     RowBox[{
     "functions", " ", "and", " ", "global", " ", "variable", " ", 
      "declarations"}], " ", "*)"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"setup", " ", "instructions"}], " ", "*)"}], " ", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"loop", " ", "instructions"}], " ", "*)"}], " ", "}"}]}], 
  "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellChangeTimes->{{3.5287301619817867`*^9, 3.528730218503264*^9}, 
   3.528730566183217*^9}],

Cell["\<\
You can also include function declarations and global variables, which will \
be useful for some of the later examples.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellChangeTimes->{{3.5287303651745453`*^9, 3.528730378807385*^9}, {
   3.528730502308189*^9, 3.5287305026342154`*^9}, 3.528730566183379*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArduinoUpload", "[", 
  RowBox[{"uno", ",", "\[IndentingNewLine]", 
   RowBox[{"{", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"loop", " ", "instructions"}], " ", "*)"}], " ", "}"}]}], 
  "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10002.},
 CellChangeTimes->{{3.528730503854937*^9, 3.5287305214836187`*^9}, 
   3.5287305729813633`*^9}],

Cell["\<\
Or, if you are trying to be very concise and have no need for the first two \
arguments, you can just run a loop of instructions.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10002.},
 CellChangeTimes->{{3.528730513071164*^9, 3.5287305729815187`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Blink", "Subsection",
 CellChangeTimes->{{3.528730409226248*^9, 3.528730410527594*^9}}],

Cell[CellGroupData[{

Cell["The Arduino tutorial: http://arduino.cc/en/Tutorial/Blink", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.528730416802294*^9, 3.528730439280401*^9}, {
   3.528730584902644*^9, 3.528730585195775*^9}, 3.528743705558948*^9}],

Cell[BoxData[
 RowBox[{"ArduinoUpload", "[", 
  RowBox[{"uno", ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DigitalWrite", "[", 
      RowBox[{"13", ",", " ", "High"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ArduinoWait", "[", "1000", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"DigitalWrite", "[", 
      RowBox[{"13", ",", "Low"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ArduinoWait", "[", "1000", "]"}]}], "}"}]}], "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.528730442061377*^9, 3.528730459339669*^9}, {
   3.528730588414847*^9, 3.528730609623765*^9}, {3.5287306589776897`*^9, 
   3.528730660352993*^9}, 3.528743705559093*^9}],

Cell["\<\
This example is pretty self explanitory. Here, I only provided a set of \
instructions to loop, which in this case is a series of successive \
DigitalWrite\[CloseCurlyQuote]s that set the pin 13 to a high or low voltage.\
\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.528743723243579*^9, 3.5287437850498133`*^9}, 
   3.528743847333604*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArduinoUpload", "[", 
  RowBox[{"uno", ",", 
   RowBox[{"{", 
    RowBox[{"DigitalBlink", "[", 
     RowBox[{"13", ",", "1000"}], "]"}], "}"}]}], "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellChangeTimes->{{3.5287307982196293`*^9, 3.528730807114987*^9}, {
  3.528743696451201*^9, 3.528743709673403*^9}}],

Cell["\<\
This is the same as the first example, but only requires one line of code. \
There are various other abstractions such as this one in the package, and I \
encourage you to add your own.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.},
 CellChangeTimes->{{3.5287308099209547`*^9, 3.528730995029255*^9}, {
  3.528743696451331*^9, 3.528743709673513*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DigitalRead", "Subsection",
 CellChangeTimes->{{3.528743864255034*^9, 3.528743870275482*^9}}],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<http://arduino.cc/en/uploads/Tutorial/button.png\>\"", "]"}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.5287436630892*^9, 3.5287436694319563`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Hook up a switch to the Arduino approximately as shown here. Reading a value \
off a port and doing something useful with it requires some SymbolicC.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.528743873523168*^9, 3.528743945934003*^9}, 
   3.528744072226602*^9}],

Cell[BoxData[
 RowBox[{"ArduinoUpload", "[", 
  RowBox[{"uno", ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"CIf", "[", 
     RowBox[{
      RowBox[{"COperator", "[", 
       RowBox[{"Equal", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"DigitalRead", "[", "2", "]"}], ",", "High"}], "}"}]}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"DigitalBlink", "[", 
       RowBox[{"13", ",", "1000"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
    "}"}]}], "]"}]], "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.52874394681215*^9, 3.528743983993888*^9}, 
   3.5287440722267647`*^9}],

Cell["\<\
This is the SymbolicC equivalent of an if statement. Here, we tell the \
Arduino to repeatedly check this if condition.\
\>", "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.},
 CellChangeTimes->{{3.528743986862488*^9, 3.528744072226871*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["AnalogRead", "Subsection",
 CellChangeTimes->{{3.5287441080037737`*^9, 3.528744113441194*^9}}],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<http://arduino.cc/en/uploads/Tutorial/AnalogReadSerial_BB.png\>\"", 
  "]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.528744115400724*^9, 3.528744119164629*^9}}],

Cell["\<\
Here, we connect a potentiometer and use its value in the Arduino.\
\>", "Text",
 CellChangeTimes->{{3.528744124292576*^9, 3.528744129961625*^9}, {
  3.528744181807481*^9, 3.528744208243836*^9}}]
}, Open  ]]
}, Open  ]],

Cell["", "Section"]
},
WindowSize->{740, 710},
WindowMargins->{{350, Automatic}, {Automatic, 50}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 6, \
2010)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 100, 1, 67, "Section"],
Cell[CellGroupData[{
Cell[704, 27, 149, 2, 34, "Subsection"],
Cell[856, 31, 1568, 27, 206, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2461, 63, 104, 1, 34, "Subsection"],
Cell[2568, 66, 735, 15, 101, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3340, 86, 101, 1, 34, "Subsection"],
Cell[3444, 89, 434, 10, 86, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3927, 105, 95, 1, 67, "Section"],
Cell[4025, 108, 98, 1, 26, "Text"],
Cell[4126, 111, 147, 2, 27, "Input"],
Cell[4276, 115, 145, 3, 26, "Text"],
Cell[4424, 120, 125, 2, 27, "Input"],
Cell[4552, 124, 155, 3, 26, "Text"],
Cell[4710, 129, 185, 4, 27, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4932, 138, 111, 1, 67, "Section"],
Cell[5046, 141, 405, 9, 41, "Text"],
Cell[CellGroupData[{
Cell[5476, 154, 102, 1, 34, "Subsection"],
Cell[5581, 157, 204, 4, 26, "Text"],
Cell[CellGroupData[{
Cell[5810, 165, 516, 13, 58, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[6329, 180, 476, 8, 41, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[6842, 193, 725, 18, 73, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[7570, 213, 338, 6, 26, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[7945, 224, 377, 9, 43, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}],
Cell[8325, 235, 274, 5, 26, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10002.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8648, 246, 93, 1, 34, "Subsection"],
Cell[CellGroupData[{
Cell[8766, 251, 264, 3, 26, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[9033, 256, 733, 14, 88, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[9769, 272, 393, 8, 41, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[10199, 285, 356, 8, 27, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}],
Cell[10558, 295, 379, 7, 41, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10001.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10986, 308, 99, 1, 35, "Subsection"],
Cell[11088, 311, 212, 5, 27, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[11325, 320, 318, 6, 41, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[11646, 328, 656, 17, 73, "Input",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}],
Cell[12305, 347, 262, 5, 26, "Text",
 CellGroupingRules->{GroupTogetherGrouping, 10000.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12616, 358, 100, 1, 35, "Subsection"],
Cell[12719, 361, 226, 5, 27, "Input",
 InitializationCell->True],
Cell[12948, 368, 205, 4, 26, "Text"]
}, Open  ]]
}, Open  ]],
Cell[13180, 376, 19, 0, 67, "Section"]
}
]
*)

(* End of internal cache information *)
